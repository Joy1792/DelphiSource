unit uThreads;

interface

uses
  System.Classes;

type
  TWorkThread = class(TThread)
  private
    { Private declarations }
  protected
    procedure Execute; override;
  end;

implementation

{
  Important: Methods and properties of objects in visual components can only be
  used in a method called using Synchronize, for example,

      Synchronize(UpdateCaption);

  and UpdateCaption could look like,

    procedure TWorkThread.UpdateCaption;
    begin
      Form1.Caption := 'Updated in a thread';
    end;

    or

    Synchronize(
      procedure
      begin
        Form1.Caption := 'Updated in thread via an anonymous method'
      end
      )
    );

  where an anonymous method is passed.

  Similarly, the developer can call the Queue method with similar parameters as
  above, instead passing another TThread class as the first parameter, putting
  the calling thread in a queue with the other thread.

}

{ TWorkThread }

procedure TWorkThread.Execute;
var
  SourceFile, TargetFile: file;
var
  Buf: array[0..255] of Byte;
begin
  try
      //关联
    AssignFile(SourceFile, SOURCE_FILE);

    AssignFile(TargetFile, TARGET_FILE);
    ProgressBar1.Max := FileSize(SourceFile);
    Timer1.Interval := 5;
       //设置打开方式
    Reset(SourceFile);
    Rewrite(TargetFile);
       //读写
    while not Eof(SourceFile) do begin
      BlockRead(SourceFile, Buf, 1);
      BlockWrite(TargetFile, Buf, 1);
      Form1.CurPosition := FileSize(TargetFile);
      form1.Caption := FileSize(TargetFile).ToString;

    end;
  finally

    CloseFile(SourceFile);
    CloseFile(TargetFile);
  end;

end;

end.

